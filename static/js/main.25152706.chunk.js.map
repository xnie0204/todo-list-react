{"version":3,"sources":["redux/types.ts","components/NewItemForm.tsx","redux/actions.ts","components/TodoItemDetails.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","redux/reducers.ts","redux/store.ts","index.tsx"],"names":["todoListActionTypes","NewItemForm","dispatch","useDispatch","useState","input","setInput","typing","setTyping","createItemFormRef","useRef","dispatchAddItemAction","type","payload","name","id","uuid","createdOn","Date","clearForm","current","reset","createItemForm","ref","onSubmit","e","preventDefault","placeholder","onFocus","onChange","target","value","onBlur","clearFormButton","className","onClick","Fragment","formatDate","date","moment","format","TodoItemDetails","props","done","doneOn","updatedOn","style","TodoItem","editingMode","setEditingMode","editedItemName","setEditedItemName","showItemDetails","setShowItemDetails","quitEditingMode","dispatchUpdateItemAction","updateItem","dispatchDeleteItemAction","toggleItemCheckbox","checked","updateItemInput","autoFocus","onKeyUp","key","itemLabelClasses","classNames","itemLabel","deleteItemButton","showItemDetailsButton","TodoList","items","useSelector","state","todoList","toggleAllItemsButton","todoItemJSXElements","map","item","length","App","header","href","now","initialState","undefined","rootReducer","combineReducers","action","newItem","filter","numItems","numDoneItems","message","updateItems","store","middleWareEnhancer","applyMiddleware","createStore","composeWithDevTools","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25152706.chunk.js","sourcesContent":["export interface TodoItemType {\n    name: string;\n    done: boolean;\n    id: string;\n    createdOn: Date;\n    doneOn: Date | undefined;\n    updatedOn: Date;\n}\n\nexport interface TodoListState {\n    items: TodoItemType[];\n}\n\nexport const todoListActionTypes = {\n    ADD_ITEM: 'ADD_ITEM',\n    DELETE_ITEM: 'DELETE_ITEM',\n    DELETE_ALL_ITEMS: 'DELETE_ALL_ITEMS',\n    TOGGLE_ITEM: 'TOGGLE_ITEM',\n    TOGGLE_ALL_ITEMS: 'TOGGLE_ALL_ITEMS',\n    UPDATE_ITEM: 'UPDATE_ITEM',\n};\n\nexport interface AddItemAction {\n    type: typeof todoListActionTypes.ADD_ITEM;\n    payload: {\n        name: string;\n        id: string;\n        createdOn: Date;\n    };\n}\n\nexport interface DeleteItemAction {\n    type: typeof todoListActionTypes.DELETE_ITEM;\n    payload: {\n        id: string;\n    };\n}\n\nexport interface DeleteAllItemsAction {\n    type: typeof todoListActionTypes.DELETE_ALL_ITEMS;\n}\n\nexport interface ToggleAllItemsAction {\n    type: typeof todoListActionTypes.TOGGLE_ALL_ITEMS;\n    payload: {\n        doneOn: Date;\n    };\n}\n\nexport interface ToggleItemAction {\n    type: typeof todoListActionTypes.TOGGLE_ITEM;\n    payload: {\n        id: string;\n        doneOn: Date;\n    };\n}\n\nexport interface UpdateItemAction {\n    type: typeof todoListActionTypes.UPDATE_ITEM;\n    payload: {\n        id: string;\n        name: string;\n        updatedOn: Date;\n    };\n}\n\nexport type TodoListAction =\n    | AddItemAction\n    | DeleteItemAction\n    | DeleteAllItemsAction\n    | ToggleItemAction\n    | ToggleAllItemsAction\n    | UpdateItemAction;\n","import React, { useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { addItem } from '../redux/actions';\n\nconst NewItemForm = (): JSX.Element => {\n    const dispatch = useDispatch();\n    const [input, setInput] = useState('');\n    const [typing, setTyping] = useState(false);\n    const createItemFormRef = useRef<HTMLFormElement>(null);\n\n    const dispatchAddItemAction = (): void => {\n        dispatch(addItem(input));\n    };\n\n    const clearForm = (): void => {\n        setInput('');\n        setTyping(false);\n        if (createItemFormRef.current) {\n            createItemFormRef.current.reset();\n        }\n    };\n\n    // handle submit event for createItemForm element\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\n        e.preventDefault();\n        dispatchAddItemAction();\n        clearForm();\n    };\n\n    // handle focus event for the input element inside createItemForm element\n    const handleFocus = (): void => {\n        setTyping(true);\n    };\n\n    // handle change event for the input element inside createItemForm element\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setInput(e.target.value);\n    };\n\n    // handle focusout event for the input element inside createItemForm element\n    const handleFocusOut = (): void => {\n        if (!input) {\n            setTyping(false);\n        }\n    };\n\n    const createItemForm = (\n        <form id=\"create-item-form\" ref={createItemFormRef} onSubmit={handleSubmit}>\n            <input\n                id=\"create-item-input\"\n                type=\"text\"\n                placeholder=\"Add a new item\"\n                onFocus={handleFocus}\n                onChange={handleChange}\n                onBlur={handleFocusOut}\n                value={input}\n            />\n            {typing && (\n                <button id=\"create-item-button\" type=\"submit\">\n                    +\n                </button>\n            )}\n        </form>\n    );\n\n    const clearFormButton = (\n        <button className=\"x-button\" onClick={clearForm}>\n            x\n        </button>\n    );\n\n    return (\n        <React.Fragment>\n            {createItemForm}\n            {clearFormButton}\n        </React.Fragment>\n    );\n};\n\nexport default NewItemForm;\n","import { v4 as uuid } from 'uuid';\n\nimport {\n    AddItemAction,\n    DeleteAllItemsAction,\n    DeleteItemAction,\n    todoListActionTypes,\n    ToggleAllItemsAction,\n    ToggleItemAction,\n    UpdateItemAction,\n} from './types';\n\n//action creators;\n// (name) => action object\n\nexport const addItem = (name: string): AddItemAction => {\n    return {\n        type: todoListActionTypes.ADD_ITEM,\n        payload: {\n            name: name,\n            id: uuid(), //auto\n            createdOn: new Date(),\n        },\n    };\n};\n\nexport const deleteItem = (id: string): DeleteItemAction => {\n    return {\n        type: todoListActionTypes.DELETE_ITEM,\n        payload: {\n            id: id,\n        },\n    };\n};\n\nexport const deleteAllItems = (): DeleteAllItemsAction => {\n    return {\n        type: todoListActionTypes.DELETE_ALL_ITEMS,\n    };\n};\n\nexport const toggleAllItems = (): ToggleAllItemsAction => {\n    return {\n        type: todoListActionTypes.TOGGLE_ALL_ITEMS,\n        payload: {\n            doneOn: new Date(),\n        },\n    };\n};\n\nexport const toggleItem = (id: string): ToggleItemAction => {\n    return {\n        type: todoListActionTypes.TOGGLE_ITEM,\n        payload: {\n            id: id,\n            doneOn: new Date(),\n        },\n    };\n};\n\nexport const updateItem = ({\n    id,\n    name,\n}: {\n    id: string;\n    name: string;\n}): UpdateItemAction => {\n    return {\n        type: todoListActionTypes.UPDATE_ITEM,\n        payload: {\n            id: id,\n            name: name,\n            updatedOn: new Date(),\n        },\n    };\n};\n","import moment from 'moment';\nimport React from 'react';\n\nimport { TodoItemType } from '../redux/types';\n\ninterface TodoItemDetailsProps extends Omit<TodoItemType, 'name' | 'id'> {}\n\nconst formatDate = (date: Date): string =>\n    moment(date).format('MMMM Do YYYY, h:mm:ss a');\n\nconst TodoItemDetails: React.FC<TodoItemDetailsProps> = (\n    props: TodoItemDetailsProps\n): JSX.Element => {\n    const { done, createdOn, doneOn, updatedOn } = props;\n    const style = {\n        'marginLeft': 'calc(1rem + 0.5vw)',\n    };\n    return (\n        <React.Fragment>\n            <li style={style}>Created on: &nbsp; {formatDate(createdOn)}</li>\n            {done && (\n                <li style={style}>Done on: &nbsp; {formatDate(doneOn as Date)}</li>\n            )}\n            <li style={style}>Updated on: &nbsp; {formatDate(updatedOn)}</li>\n        </React.Fragment>\n    );\n};\n\nexport default TodoItemDetails;\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { deleteItem, toggleItem, updateItem } from '../redux/actions';\nimport { TodoItemType } from '../redux/types';\nimport TodoItemDetails from './TodoItemDetails';\n\n// show just one item\ntype TodoItemProps = TodoItemType;\n\nconst TodoItem: React.FC<TodoItemProps> = (props: TodoItemProps): JSX.Element => {\n    const dispatch = useDispatch();\n    const [editingMode, setEditingMode] = useState(false);\n    const [editedItemName, setEditedItemName] = useState(props.name);\n    const [showItemDetails, setShowItemDetails] = useState(false);\n\n    const quitEditingMode = (): void => {\n        setEditingMode(false);\n        setEditedItemName(props.name);\n    };\n\n    //connect to reducer\n    const dispatchToggleItemAction = (): void => {\n        dispatch(toggleItem(props.id));\n    };\n\n    const dispatchUpdateItemAction = (): void => {\n        dispatch(updateItem({ id: props.id, name: editedItemName }));\n    };\n\n    const dispatchDeleteItemAction = (): void => {\n        dispatch(deleteItem(props.id));\n    };\n\n    // manage Enter and Escape\n    const handleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n        if (e.key === 'Enter') {\n            if (editedItemName) {\n                dispatchUpdateItemAction();\n            } else {\n                // if it is an empty string, delete it\n                dispatchDeleteItemAction();\n            }\n            quitEditingMode();\n        } else if (e.key === 'Escape') {\n            quitEditingMode();\n        }\n    };\n\n    const handleFocusOut = (): void => {\n        if (editedItemName) {\n            dispatchUpdateItemAction();\n        } else {\n            dispatchDeleteItemAction();\n        }\n        quitEditingMode();\n    };\n\n    const handleTyping = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setEditedItemName(e.target.value);\n    };\n\n    const startTyping = (): void => {\n        setEditingMode(true);\n    };\n\n    const toggleShowItemDetails = (): void => {\n        setShowItemDetails(!showItemDetails);\n    };\n\n    //CSS\n    const toggleItemCheckbox = (\n        <input\n            type=\"checkbox\"\n            className=\"toggle-item-checkbox\"\n            onChange={dispatchToggleItemAction}\n            checked={props.done}\n        />\n    );\n\n    const updateItemInput = (\n        <input\n            autoFocus\n            type=\"text\"\n            value={editedItemName}\n            onKeyUp={handleKeyUp}\n            onBlur={handleFocusOut}\n            className=\"update-item-input\"\n            onChange={handleTyping}\n        />\n    );\n\n    const itemLabelClasses = classNames({\n        'item-label': true,\n        'item-strikethrough': props.done,\n    });\n\n    const itemLabel = (\n        <label onClick={startTyping} className={itemLabelClasses}>\n            {props.name}\n        </label>\n    );\n\n    const deleteItemButton = (\n        <button className=\"x-button\" onClick={dispatchDeleteItemAction}>\n            x\n        </button>\n    );\n\n    const showItemDetailsButton = (\n        <button className=\"show-item-details-button\" onClick={toggleShowItemDetails}>\n            ...\n        </button>\n    );\n\n    if (!editingMode) {\n        return (\n            <React.Fragment>\n                <li>\n                    {toggleItemCheckbox}\n                    {itemLabel}\n                    {deleteItemButton}\n                    {showItemDetailsButton}\n                </li>\n                {/* if show details is true ,then it back details */}\n                {showItemDetails && (\n                    <TodoItemDetails\n                        done={props.done}\n                        createdOn={props.createdOn}\n                        doneOn={props.doneOn}\n                        updatedOn={props.updatedOn}\n                    />\n                )}\n            </React.Fragment>\n        );\n    } else {\n        return (\n            <li>\n                {toggleItemCheckbox}\n                {updateItemInput}\n                {deleteItemButton}\n            </li>\n        );\n    }\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { deleteAllItems, toggleAllItems } from '../redux/actions';\nimport { RootState } from '../redux/store';\nimport { TodoItemType } from '../redux/types';\nimport NewItemForm from './NewItemForm';\nimport TodoItem from './TodoItem';\n\nconst TodoList: React.FC = (): JSX.Element => {\n    const dispatch = useDispatch();\n    const items: TodoItemType[] = useSelector(\n        (state: RootState) => state.todoList.items\n    );\n\n    const dispatchDeleteAllItemsAction = (): void => {\n        dispatch(deleteAllItems());\n    };\n\n    const dispatchToggleAllItemsAction = (): void => {\n        dispatch(toggleAllItems());\n    };\n\n    const toggleAllItemsButton = (\n        <input\n            id=\"toggle-all-items-button\"\n            className=\"hide\"\n            type=\"checkbox\"\n            onClick={dispatchToggleAllItemsAction}\n        />\n    );\n\n    const todoItemJSXElements: JSX.Element[] = items.map(item => (\n        <TodoItem\n            name={item.name}\n            done={item.done}\n            id={item.id}\n            key={item.id}\n            createdOn={item.createdOn}\n            doneOn={item.doneOn}\n            updatedOn={item.updatedOn}\n        />\n    ));\n\n    return (\n        <div className=\"content-div\">\n            <div className=\"create-item-div\">\n                {items.length > 0 && toggleAllItemsButton}\n                <NewItemForm />\n            </div>\n            <div className=\"item-list-div\">\n                <br />\n                <ul>{todoItemJSXElements}</ul>\n            </div>\n            <a id=\"delete-all-items-button\" onClick={dispatchDeleteAllItemsAction}>\n                DELETE ALL\n            </a>\n        </div>\n    );\n};\n\nexport default TodoList;\n","import React from 'react';\n\nimport TodoList from './components/TodoList';\n\nconst App: React.FC = (): JSX.Element => {\n    const header = (\n        <div className=\"title-div\">\n            <span className=\"title\">\n                <a href=\"#\">Your Todo List</a>\n            </span>\n            <span className=\"author\">\n                <a href=\"#\">&nbsp; Xiaomeng Nie &nbsp;</a>\n            </span>\n        </div>\n    );\n\n    return (\n        <div className=\"app-container\">\n            {header}\n            <TodoList />\n        </div>\n    );\n};\n\nexport default App;\n","import { v4 as uuid } from 'uuid';\n\nimport {\n    AddItemAction,\n    DeleteItemAction,\n    TodoItemType,\n    TodoListAction,\n    todoListActionTypes,\n    TodoListState,\n    ToggleItemAction,\n    UpdateItemAction,\n} from './types';\n\nconst now: Date = new Date();\n\nconst initialState: TodoListState = {\n    items: [\n        {\n            name: 'This is a done message',\n            done: true,\n            id: uuid(),\n            createdOn: now,\n            doneOn: undefined,\n            updatedOn: now,\n        },\n        {\n            name: 'This is an undone message',\n            done: false,\n            id: uuid(),\n            createdOn: now,\n            doneOn: undefined,\n            updatedOn: now,\n        },\n    ],\n};\n\nexport default (\n    state: TodoListState = initialState,\n    action: TodoListAction\n): TodoListState => {\n    switch (action.type) {\n        case todoListActionTypes.ADD_ITEM: {\n            const { name, id, createdOn } = (action as AddItemAction).payload;\n            const newItem = {\n                name: name,\n                done: false,\n                id: id,\n                createdOn: createdOn,\n                doneOn: undefined,\n                updatedOn: createdOn,\n            };\n            return {\n                items: [...state.items, newItem],\n            };\n        }\n\n        case todoListActionTypes.DELETE_ITEM: {\n            const { id } = (action as DeleteItemAction).payload;\n            const updateItem: TodoItemType[] = state.items.filter(\n                item => item.id !== id\n            );\n            return {\n                items: updateItem,\n            };\n        }\n\n        case todoListActionTypes.DELETE_ALL_ITEMS: {\n            return {\n                items: [],\n            };\n        }\n\n        case todoListActionTypes.TOGGLE_ITEM: {\n            const { id, doneOn } = (action as ToggleItemAction).payload;\n            const updateItem: TodoItemType[] = state.items.map(item => {\n                if (item.id === id) {\n                    if (item.done) {\n                        return { ...item, done: false, doneOn: undefined };\n                    } else {\n                        return { ...item, done: true, doneOn: doneOn };\n                    }\n                } else {\n                    return item;\n                }\n            });\n            return {\n                items: updateItem,\n            };\n        }\n\n        case todoListActionTypes.TOGGLE_ALL_ITEMS: {\n            const numItems: number = state.items.length;\n            let numDoneItems = 0;\n\n            //caculate numDoneItems\n            for (const message of state.items) {\n                if (message.done === true) {\n                    numDoneItems++;\n                }\n            }\n\n            const updateItems: TodoItemType[] = state.items.map(item => {\n                if (numDoneItems === numItems) {\n                    //means everything has been toggled, untoggle them all\n                    return { ...item, done: false };\n                } else {\n                    return { ...item, done: true };\n                }\n            });\n\n            return {\n                items: updateItems,\n            };\n        }\n\n        case todoListActionTypes.UPDATE_ITEM: {\n            const updateItems: TodoItemType[] = [...state.items];\n            const { id, name, updatedOn } = (action as UpdateItemAction).payload;\n            for (const message of updateItems) {\n                if (message.id === id) {\n                    message.name = name;\n                    message.updatedOn = updatedOn;\n                }\n            }\n            return {\n                items: updateItems,\n            };\n        }\n\n        default: {\n            return state;\n        }\n    }\n};\n","import { applyMiddleware, combineReducers, createStore, Middleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport reducers from './reducers';\n\nconst rootReducer = combineReducers({\n    todoList: reducers,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type, @typescript-eslint/explicit-module-boundary-types\nexport const configureStore = () => {\n    const middlewares: Middleware[] = [];\n    const middleWareEnhancer = applyMiddleware(...middlewares);\n    const store = createStore(rootReducer, composeWithDevTools(middleWareEnhancer));\n    return store;\n};\n","import './styles.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport { configureStore } from './redux/store';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}